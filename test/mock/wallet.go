// Code generated by MockGen. DO NOT EDIT.
// Source: wallet.go
//
// Generated by this command:
//
//	mockgen -source=wallet.go -destination=../../../test/mock/wallet.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	model "go-wallet-system/wallet_system/core/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
	isgomock struct{}
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWalletRepository) Create(wallet *model.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWalletRepositoryMockRecorder) Create(wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWalletRepository)(nil).Create), wallet)
}

// FindById mocks base method.
func (m *MockWalletRepository) FindById(id string) *model.Wallet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*model.Wallet)
	return ret0
}

// FindById indicates an expected call of FindById.
func (mr *MockWalletRepositoryMockRecorder) FindById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockWalletRepository)(nil).FindById), id)
}

// Update mocks base method.
func (m *MockWalletRepository) Update(wallet *model.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWalletRepositoryMockRecorder) Update(wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWalletRepository)(nil).Update), wallet)
}

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceMockRecorder
	isgomock struct{}
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
	mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
	mock := &MockWalletService{ctrl: ctrl}
	mock.recorder = &MockWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockWalletService) Deposit(userId string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", userId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockWalletServiceMockRecorder) Deposit(userId, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockWalletService)(nil).Deposit), userId, amount)
}

// Transfer mocks base method.
func (m *MockWalletService) Transfer(from, to string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", from, to, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockWalletServiceMockRecorder) Transfer(from, to, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockWalletService)(nil).Transfer), from, to, amount)
}

// Withdraw mocks base method.
func (m *MockWalletService) Withdraw(userId string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", userId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWalletServiceMockRecorder) Withdraw(userId, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWalletService)(nil).Withdraw), userId, amount)
}

// MockWalletController is a mock of WalletController interface.
type MockWalletController struct {
	ctrl     *gomock.Controller
	recorder *MockWalletControllerMockRecorder
	isgomock struct{}
}

// MockWalletControllerMockRecorder is the mock recorder for MockWalletController.
type MockWalletControllerMockRecorder struct {
	mock *MockWalletController
}

// NewMockWalletController creates a new mock instance.
func NewMockWalletController(ctrl *gomock.Controller) *MockWalletController {
	mock := &MockWalletController{ctrl: ctrl}
	mock.recorder = &MockWalletControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletController) EXPECT() *MockWalletControllerMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockWalletController) Deposit(username, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", username, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockWalletControllerMockRecorder) Deposit(username, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockWalletController)(nil).Deposit), username, amount)
}

// Transfer mocks base method.
func (m *MockWalletController) Transfer(fromUsername, toUsername, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", fromUsername, toUsername, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockWalletControllerMockRecorder) Transfer(fromUsername, toUsername, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockWalletController)(nil).Transfer), fromUsername, toUsername, amount)
}

// Withdraw mocks base method.
func (m *MockWalletController) Withdraw(username, amount string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", username, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWalletControllerMockRecorder) Withdraw(username, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWalletController)(nil).Withdraw), username, amount)
}
